#!/bin/bash

set -euo pipefail
trap 'echo -e "\033[31m[ERROR] 发生错误，退出于第 $LINENO 行\033[0m" >&2' ERR

# 彩色输出
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
CYAN="\033[1;36m"
RESET="\033[0m"

# 自动检测线程数
CPU_THREADS=$(nproc)

# manifest repo 地址
MANIFEST_REPO="https://github.com/OnePlusOSS/kernel_manifest.git"
TEMP_DIR=$(mktemp -d)

# 克隆 manifest 仓库获取分支列表
echo -e "$CYAN>>> 正在获取远程 manifest 分支列表...$RESET"
git ls-remote --heads "$MANIFEST_REPO" | awk '{print $2}' | sed 's#refs/heads/##' > "$TEMP_DIR/branches.txt"
mapfile -t BRANCHES < "$TEMP_DIR/branches.txt"

if [[ ${#BRANCHES[@]} -eq 0 ]]; then
  echo -e "\033[31m[ERROR] 获取分支失败！\033[0m"
  exit 1
fi

echo -e "$YELLOW>>> 请选择设备/分支代号（对应于处理器代号）...$RESET"
select CPUD in "${BRANCHES[@]}"; do
  if [[ -n "$CPUD" ]]; then
    echo -e "$GREEN>>> 你选择的是: $CPUD$RESET"
    break
  else
    echo -e "\033[31m[ERROR] 无效的选择，请重新选择！\033[0m"
  fi
done

# 拉取该分支下的 manifest 文件列表供选择
MANIFEST_TEMP_DIR=$(mktemp -d)
echo -e "$CYAN>>> 正在获取设备清单文件列表...$RESET"
git clone --depth 1 -b "$CPUD" "$MANIFEST_REPO" "$MANIFEST_TEMP_DIR"
cd "$MANIFEST_TEMP_DIR"
DEVICE_XML_LIST=$(ls *.xml 2>/dev/null)

if [[ -z "$DEVICE_XML_LIST" ]]; then
  echo -e "\033[31m[ERROR] 未找到设备清单文件！\033[0m"
  exit 1
fi

echo -e "$YELLOW>>> 请选择设备代号...$RESET"
select XML_FILE in $DEVICE_XML_LIST; do
  if [[ -n "$XML_FILE" ]]; then
    DEVICE=$(basename "$XML_FILE" .xml)
    echo -e "$GREEN>>> 你选择的设备是: $DEVICE$RESET"
    break
  else
    echo -e "\033[31m[ERROR] 无效的选择，请重新选择！\033[0m"
  fi
done
cd "$OLDPWD"
rm -rf "$MANIFEST_TEMP_DIR"

# 交互式输入
read -rp "请输入 Android 内核平台版本 (如: android15)：" ANDROID_VERSION
read -rp "请输入内核版本号 (如: 6.6)：" KERNEL_VERSION
read -rp "是否启用 LZ4 补丁？(y/n)：" ENABLE_LZ4
read -rp "是否启用 VFS 补丁？(y/n)：" ENABLE_VFS
read -rp "是否启用 SUSFS（从 Release 下载模块）？(y/n)：" ENABLE_SUSFS
read -rp "请选择 KernelSU 类型 (MKSU / SukiSU / SukiSU-Ultra)：" KSU_TYPE
read -rp "请输入 Kernel 名称后缀 (如: -by-chuchen)：" KERNEL_NAME
read -rp "是否启用 Polly 优化？(y/n)：" ENABLE_POLLY
read -rp "是否启用 O3 优化？(y/n)：" ENABLE_O3
read -rp "是否启用 LTO？(y/n)：" ENABLE_LTO

# 设置路径
WORKDIR="$PWD/kernel_build_$DEVICE"
OUTDIR="$PWD/out"

# 清理旧目录并准备新目录
rm -rf "$WORKDIR" "$OUTDIR"
mkdir -p "$WORKDIR" "$OUTDIR"
cd "$WORKDIR"

# 初始化 repo 并同步源码
echo -e "$YELLOW>>> 初始化 repo 并同步源码（使用 $CPU_THREADS 线程）...$RESET"
repo init -u "$MANIFEST_REPO" -b "$CPUD" -m "$XML_FILE"

repo sync -j$CPU_THREADS --force-sync --no-clone-bundle --no-tags

# 自动检测内核路径（寻找包含 defconfig 的路径）
echo -e "$CYAN>>> 检测内核源码路径...$RESET"
KERNEL_DIR=$(find . -type f -name "*_defconfig" | head -n1 | xargs dirname)

if [[ -z "$KERNEL_DIR" ]]; then
  echo -e "\033[31m[ERROR] 未找到 defconfig，无法确定内核路径！\033[0m"
  exit 1
fi

cd "$KERNEL_DIR"
echo -e "$GREEN>>> 内核目录定位成功: $KERNEL_DIR$RESET"

# 应用补丁
if [[ "$ENABLE_LZ4" == "y" ]]; then
  echo -e "$GREEN>> 应用 LZ4 补丁...$RESET"
  patch -p1 < "$PWD/../../patches/lz4.patch" || echo "跳过"
fi

if [[ "$ENABLE_VFS" == "y" ]]; then
  echo -e "$GREEN>> 应用 VFS 补丁...$RESET"
  patch -p1 < "$PWD/../../patches/vfs.patch" || echo "跳过"
fi

# 添加 defconfig 配置项
sed -i '/CONFIG_KALLSYMS/a CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KALLSYMS_ALL=y\nCONFIG_KSU=y\nCONFIG_KPM=y' arch/arm64/configs/*_defconfig || true

# SUSFS 集成
if [[ "$ENABLE_SUSFS" == "y" ]]; then
  echo -e "$GREEN>> 集成 SUSFS 模块...$RESET"
  git clone --depth 1 https://github.com/sidex15/susfs4ksu-module.git "$WORKDIR/susfs"
  cp -r "$WORKDIR/susfs"/* drivers/ || true
fi

# KernelSU 集成
if [[ "$KSU_TYPE" =~ MKSU ]]; then
  echo -e "$CYAN>>> 集成 MKSU...$RESET"
  git clone --depth 1 https://github.com/KernelSU-Next/KernelSU-Next.git ksu
  cp -r ksu/* .
  bash KernelSU-Next/patch.sh || true
elif [[ "$KSU_TYPE" =~ SukiSU ]]; then
  echo -e "$CYAN>>> 集成 SukiSU ($KSU_TYPE)...$RESET"
  SUKI_BRANCH="main"
  if [[ "$KSU_TYPE" == "SukiSU-Ultra" ]]; then
    SUKI_BRANCH="ultra"
  fi
  git clone --depth 1 -b "$SUKI_BRANCH" https://github.com/tiann/sukisu.git sukisu
  bash sukisu/patch.sh || true
fi

# 编译内核
echo -e "$YELLOW>>> 开始构建内核（使用 $CPU_THREADS 线程）...$RESET"
make O=out ARCH=arm64 ${DEVICE}_defconfig
make -j$CPU_THREADS O=out ARCH=arm64 CC=clang LLVM=1

# 导出 Image
if [[ -f "out/arch/arm64/boot/Image" ]]; then
  cp out/arch/arm64/boot/Image "$OUTDIR/Image$KERNEL_NAME"
  echo -e "$GREEN✅ 内核构建完成，输出位于：$OUTDIR/Image$KERNEL_NAME$RESET"
else
  echo -e "\033[31m构建失败，Image 文件未生成\033[0m"
  exit 1
fi

# AnyKernel3 打包
echo -e "$CYAN>>> 打包 AnyKernel3...$RESET"
cd "$OUTDIR"
git clone --depth 1 https://github.com/osm0sis/AnyKernel3.git
cp "Image$KERNEL_NAME" AnyKernel3/
cd AnyKernel3
zip -r9 "Kernel$KERNEL_NAME.zip" ./*
echo -e "$GREEN✅ AnyKernel3 包已生成: $PWD/Kernel$KERNEL_NAME.zip$RESET"

# 清理临时目录
rm -rf "$TEMP_DIR"
