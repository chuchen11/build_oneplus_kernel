#!/bin/bash

set -euo pipefail
trap 'echo -e "\033[31m[ERROR] 发生错误，退出于第 $LINENO 行\033[0m" >&2' ERR

GREEN="\033[1;32m"
YELLOW="\033[1;33m"
CYAN="\033[1;36m"
RESET="\033[0m"

CPU_THREADS=$(nproc)  # 获取可用 CPU 线程数

MANIFEST_REPO="https://github.com/OnePlusOSS/kernel_manifest.git"
TEMP_DIR=$(mktemp -d)

# 映射 Android 内核平台版本 + 内核版本号
KERNEL_VERSION_OPTIONS=(
  "5.10-android12"
  "5.10-android13"
  "5.15-android13"
  "5.15-android14"
  "6.1-android14"
  "6.6-android15"
)

# 获取分支列表
echo -e "$CYAN>>> 正在获取远程 manifest 分支列表...$RESET"
git ls-remote --heads "$MANIFEST_REPO" | awk '{print $2}' | sed 's#refs/heads/##' > "$TEMP_DIR/branches.txt"
mapfile -t BRANCHES < "$TEMP_DIR/branches.txt"

if [[ ${#BRANCHES[@]} -eq 0 ]]; then
  echo -e "\033[31m[ERROR] 获取分支失败！\033[0m"
  exit 1
fi

# 显示所有获取到的分支供选择
echo -e "$YELLOW>>> 请选择一个分支...$RESET"
select BRANCH in "${BRANCHES[@]}"; do
  if [[ -n "$BRANCH" ]]; then
    echo -e "$GREEN>>> 你选择的是: $BRANCH$RESET"
    break
  fi
done

# 拉取该分支 manifest 下的 XML 文件列表供选择
MANIFEST_TEMP_DIR=$(mktemp -d)
echo -e "$CYAN>>> 获取 manifest 文件列表...$RESET"
git clone --depth 1 -b "$BRANCH" "$MANIFEST_REPO" "$MANIFEST_TEMP_DIR"
cd "$MANIFEST_TEMP_DIR"
DEVICE_XML_LIST=$(ls *.xml 2>/dev/null)

if [[ -z "$DEVICE_XML_LIST" ]]; then
  echo -e "\033[31m[ERROR] 未找到设备清单文件！\033[0m"
  exit 1
fi

echo -e "$YELLOW>>> 请选择 manifest 文件（设备代号）...$RESET"
select XML_FILE in $DEVICE_XML_LIST; do
  if [[ -n "$XML_FILE" ]]; then
    DEVICE=$(basename "$XML_FILE" .xml)
    echo -e "$GREEN>>> 你选择的设备是: $DEVICE$RESET"
    break
  fi
done
cd "$OLDPWD"
rm -rf "$MANIFEST_TEMP_DIR"

# 选择内核平台+版本
echo -e "$YELLOW>>> 请选择 Android 内核平台 + 版本号...$RESET"
select KVER in "${KERNEL_VERSION_OPTIONS[@]}"; do
  if [[ -n "$KVER" ]]; then
    ANDROID_VERSION=${KVER##*-}
    KERNEL_VERSION=${KVER%%-*}
    echo -e "$GREEN>>> 已选择: $KVER$RESET"
    break
  fi
done

# 选择工具链
echo -e "$YELLOW>>> 请选择交叉编译工具链...$RESET"
select TOOLCHAIN in "gcc" "aosp-clang" "google-prebuilt-clang" "proton-clang" "neutron-clang" "silica-clang"; do
  if [[ -n "$TOOLCHAIN" ]]; then
    echo -e "$GREEN>>> 你选择的工具链是: $TOOLCHAIN$RESET"
    break
  fi
done

# 拉取对应工具链
echo -e "$CYAN>>> 正在拉取工具链...$RESET"

# gcc工具链的拉取
[[ "$TOOLCHAIN" == "gcc" ]] && {
  git clone --depth=1 https://github.com/AndroidCAndS/android-prebuilt-toolchains.git toolchains/gcc
  export PATH="$(pwd)/toolchains/gcc/bin:$PATH"
}

[[ "$TOOLCHAIN" == "aosp-clang" ]] && {
  git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang/aosp-clang
  export PATH="$(pwd)/clang/aosp-clang/bin:$PATH"
}

[[ "$TOOLCHAIN" == "google-prebuilt-clang" ]] && {
  git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang/google-prebuilt-clang
  export PATH="$(pwd)/clang/google-prebuilt-clang/bin:$PATH"
}

[[ "$TOOLCHAIN" == "proton-clang" ]] && {
  git clone --depth=1 https://github.com/kdrag0n/proton-clang toolchains/proton-clang
  export PATH="$(pwd)/toolchains/proton-clang/bin:$PATH"
}

[[ "$TOOLCHAIN" == "neutron-clang" ]] && {
  git clone --depth=1 https://github.com/Neutron-OSS/neutron-clang toolchains/neutron-clang
  export PATH="$(pwd)/toolchains/neutron-clang/bin:$PATH"
}

[[ "$TOOLCHAIN" == "silica-clang" ]] && {
  git clone --depth=1 https://github.com/ChrisDoomer/silica-clang toolchains/silica-clang
  export PATH="$(pwd)/toolchains/silica-clang/bin:$PATH"
}

# 获取用户选择的补丁和优化选项
read -rp "是否启用 LZ4 补丁？(y/n): " ENABLE_LZ4
read -rp "是否启用 VFS 补丁？(y/n): " ENABLE_VFS
read -rp "是否启用 SUSFS 模块？(y/n): " ENABLE_SUSFS
read -rp "请选择 KernelSU 类型 (MKSU / SukiSU / SukiSU-Ultra): " KSU_TYPE
read -rp "Kernel 名称后缀 (如: -chuchen): " KERNEL_NAME
read -rp "是否启用 Polly 优化？(y/n): " ENABLE_POLLY
read -rp "是否启用 O3 优化？(y/n): " ENABLE_O3
read -rp "是否启用 LTO？(y/n): " ENABLE_LTO

WORKDIR="$PWD/kernel_build_$DEVICE"
OUTDIR="$PWD/out"
rm -rf "$WORKDIR" "$OUTDIR"
mkdir -p "$WORKDIR" "$OUTDIR"
cd "$WORKDIR"

# 使用 GKI 精简 manifest
GKI_MANIFEST_URL="https://github.com/OnePlusOSS/gki_minimal_manifest.git"
GKI_MANIFEST_BRANCH="$BRANCH"

repo init -u "$GKI_MANIFEST_URL" -b "$GKI_MANIFEST_BRANCH" -m "$XML_FILE"
repo sync -j$CPU_THREADS --force-sync --no-clone-bundle --no-tags

KERNEL_DIR=$(find . -type f -name "*_defconfig" | head -n1 | xargs dirname)
if [[ -z "$KERNEL_DIR" ]]; then
  echo -e "\033[31m[ERROR] 未找到 defconfig，无法确定内核路径！\033[0m"
  exit 1
fi
cd "$KERNEL_DIR"
echo -e "$GREEN>>> 内核目录定位成功: $KERNEL_DIR$RESET"

# 应用补丁
[[ "$ENABLE_LZ4" == "y" ]] && patch -p1 < "$PWD/../../patches/lz4.patch" || true
[[ "$ENABLE_VFS" == "y" ]] && patch -p1 < "$PWD/../../patches/vfs.patch" || true

# 修改配置
sed -i '/CONFIG_KALLSYMS/a CONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KALLSYMS_ALL=y\nCONFIG_KSU=y\nCONFIG_KPM=y' arch/arm64/configs/*_defconfig || true

# SUSFS 模块
if [[ "$ENABLE_SUSFS" == "y" ]]; then
  git clone --depth 1 https://github.com/sidex15/susfs4ksu-module.git "$WORKDIR/susfs"
  cp -r "$WORKDIR/susfs"/* drivers/
fi

# KernelSU 模块
if [[ "$KSU_TYPE" =~ MKSU ]]; then
  git clone --depth 1 https://github.com/KernelSU-Next/KernelSU-Next.git ksu
  cp -r ksu/* . 
  bash KernelSU-Next/patch.sh || true
elif [[ "$KSU_TYPE" =~ SukiSU ]]; then
  BRANCH="main"
  [[ "$KSU_TYPE" == "SukiSU-Ultra" ]] && BRANCH="ultra"
  git clone --depth 1 -b "$BRANCH" https://github.com/tiann/sukisu.git sukisu
  bash sukisu/patch.sh || true
fi

# 编译内核
make O=out ARCH=arm64 ${DEVICE}_defconfig
make -j$CPU_THREADS O=out ARCH=arm64 CC=$TOOLCHAIN LLVM=1

# 检查构建是否成功
if [[ -f "out/arch/arm64/boot/Image" ]]; then
  cp out/arch/arm64/boot/Image "$OUTDIR/Image$KERNEL_NAME"
fi

